// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mulBF16_mulBF16,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.085000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=247,HLS_SYN_LUT=450,HLS_VERSION=2020_2}" *)

module mulBF16 (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] a;
wire   [31:0] b;
wire   [31:0] c;
reg    c_ap_vld;
reg   [31:0] b_read_reg_329;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] a_read_reg_334;
wire   [7:0] exponent_b_fu_127_p4;
reg   [7:0] exponent_b_reg_339;
wire   [0:0] or_ln51_fu_161_p2;
reg   [0:0] or_ln51_reg_344;
wire   [0:0] or_ln56_fu_179_p2;
reg   [0:0] or_ln56_reg_348;
reg   [0:0] tmp_2_reg_352;
reg   [7:0] st_reg_357;
reg   [8:0] sf_reg_362;
wire   [8:0] add_ln84_1_fu_239_p2;
reg   [8:0] add_ln84_1_reg_367;
wire    ap_CS_fsm_state2;
wire   [6:0] empty_14_fu_101_p1;
wire   [7:0] mantissa_a_fu_115_p3;
wire   [6:0] empty_fu_97_p1;
wire   [7:0] mantissa_b_fu_137_p3;
wire   [7:0] exponent_a_fu_105_p4;
wire   [0:0] icmp_ln51_fu_149_p2;
wire   [0:0] icmp_ln51_1_fu_155_p2;
wire   [0:0] icmp_ln56_fu_167_p2;
wire   [0:0] icmp_ln56_1_fu_173_p2;
wire   [7:0] raw_m_ab_fu_185_p0;
wire   [7:0] raw_m_ab_fu_185_p1;
wire   [15:0] raw_m_ab_fu_185_p2;
wire   [0:0] tmp_1_fu_191_p3;
wire   [8:0] zext_ln66_fu_207_p1;
wire   [8:0] select_ln66_fu_199_p3;
wire   [31:0] xor_ln61_fu_245_p2;
wire   [15:0] zext_ln73_1_fu_262_p1;
wire   [15:0] zext_ln73_2_fu_265_p1;
wire   [15:0] mantissa_c_fu_268_p3;
wire  signed [9:0] sext_ln84_fu_287_p1;
wire   [9:0] zext_ln73_fu_259_p1;
wire   [9:0] add_ln84_fu_290_p2;
wire   [16:0] tmp_3_fu_296_p3;
wire   [16:0] tmp_fu_249_p4;
wire   [0:0] tmp_4_fu_275_p3;
wire   [6:0] trunc_ln81_fu_283_p1;
wire   [31:0] tmp1_fu_308_p6;
wire  signed [31:0] sext_ln84_1_fu_304_p1;
reg   [1:0] ap_NS_fsm;
wire   [15:0] raw_m_ab_fu_185_p00;
wire   [15:0] raw_m_ab_fu_185_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

mulBF16_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a(a),
    .b(b),
    .c(c),
    .c_ap_vld(c_ap_vld)
);

mulBF16_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(raw_m_ab_fu_185_p0),
    .din1(raw_m_ab_fu_185_p1),
    .dout(raw_m_ab_fu_185_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a_read_reg_334 <= a;
        b_read_reg_329 <= b;
        exponent_b_reg_339 <= {{b[14:7]}};
        or_ln51_reg_344 <= or_ln51_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln56_fu_179_p2 == 1'd0) & (or_ln51_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln84_1_reg_367 <= add_ln84_1_fu_239_p2;
        sf_reg_362 <= {{raw_m_ab_fu_185_p2[15:7]}};
        st_reg_357 <= {{raw_m_ab_fu_185_p2[15:8]}};
        tmp_2_reg_352 <= raw_m_ab_fu_185_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln51_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        or_ln56_reg_348 <= or_ln56_fu_179_p2;
    end
end

always @ (*) begin
    if (((or_ln56_reg_348 == 1'd0) & (or_ln51_reg_344 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_ap_vld = 1'b1;
    end else begin
        c_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln84_1_fu_239_p2 = (zext_ln66_fu_207_p1 + select_ln66_fu_199_p3);

assign add_ln84_fu_290_p2 = ($signed(sext_ln84_fu_287_p1) + $signed(zext_ln73_fu_259_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c = (tmp1_fu_308_p6 | sext_ln84_1_fu_304_p1);

assign empty_14_fu_101_p1 = a[6:0];

assign empty_fu_97_p1 = b[6:0];

assign exponent_a_fu_105_p4 = {{a[14:7]}};

assign exponent_b_fu_127_p4 = {{b[14:7]}};

assign icmp_ln51_1_fu_155_p2 = ((exponent_b_fu_127_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_149_p2 = ((exponent_a_fu_105_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_173_p2 = ((exponent_b_fu_127_p4 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_167_p2 = ((exponent_a_fu_105_p4 == 8'd255) ? 1'b1 : 1'b0);

assign mantissa_a_fu_115_p3 = {{1'd1}, {empty_14_fu_101_p1}};

assign mantissa_b_fu_137_p3 = {{1'd1}, {empty_fu_97_p1}};

assign mantissa_c_fu_268_p3 = ((tmp_2_reg_352[0:0] == 1'b1) ? zext_ln73_1_fu_262_p1 : zext_ln73_2_fu_265_p1);

assign or_ln51_fu_161_p2 = (icmp_ln51_fu_149_p2 | icmp_ln51_1_fu_155_p2);

assign or_ln56_fu_179_p2 = (icmp_ln56_fu_167_p2 | icmp_ln56_1_fu_173_p2);

assign raw_m_ab_fu_185_p0 = raw_m_ab_fu_185_p00;

assign raw_m_ab_fu_185_p00 = mantissa_b_fu_137_p3;

assign raw_m_ab_fu_185_p1 = raw_m_ab_fu_185_p10;

assign raw_m_ab_fu_185_p10 = mantissa_a_fu_115_p3;

assign select_ln66_fu_199_p3 = ((tmp_1_fu_191_p3[0:0] == 1'b1) ? 9'd386 : 9'd385);

assign sext_ln84_1_fu_304_p1 = $signed(tmp_3_fu_296_p3);

assign sext_ln84_fu_287_p1 = $signed(add_ln84_1_reg_367);

assign tmp1_fu_308_p6 = {{{{{tmp_fu_249_p4}, {6'd0}}, {tmp_4_fu_275_p3}}, {1'd0}}, {trunc_ln81_fu_283_p1}};

assign tmp_1_fu_191_p3 = raw_m_ab_fu_185_p2[32'd15];

assign tmp_3_fu_296_p3 = {{add_ln84_fu_290_p2}, {7'd0}};

assign tmp_4_fu_275_p3 = mantissa_c_fu_268_p3[32'd8];

assign tmp_fu_249_p4 = {{xor_ln61_fu_245_p2[31:15]}};

assign trunc_ln81_fu_283_p1 = mantissa_c_fu_268_p3[6:0];

assign xor_ln61_fu_245_p2 = (b_read_reg_329 ^ a_read_reg_334);

assign zext_ln66_fu_207_p1 = exponent_a_fu_105_p4;

assign zext_ln73_1_fu_262_p1 = st_reg_357;

assign zext_ln73_2_fu_265_p1 = sf_reg_362;

assign zext_ln73_fu_259_p1 = exponent_b_reg_339;

endmodule //mulBF16
