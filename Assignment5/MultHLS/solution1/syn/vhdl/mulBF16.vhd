-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mulBF16 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of mulBF16 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mulBF16_mulBF16,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.085000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=247,HLS_SYN_LUT=450,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_182 : STD_LOGIC_VECTOR (8 downto 0) := "110000010";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal c : STD_LOGIC_VECTOR (31 downto 0);
    signal c_ap_vld : STD_LOGIC;
    signal b_read_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal a_read_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal exponent_b_fu_127_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal exponent_b_reg_339 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln51_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal st_reg_357 : STD_LOGIC_VECTOR (7 downto 0);
    signal sf_reg_362 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln84_1_fu_239_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln84_1_reg_367 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_14_fu_101_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mantissa_a_fu_115_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_97_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mantissa_b_fu_137_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal exponent_a_fu_105_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln51_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_1_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal raw_m_ab_fu_185_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal raw_m_ab_fu_185_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal raw_m_ab_fu_185_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_191_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_fu_207_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln66_fu_199_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln61_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_1_fu_262_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_2_fu_265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mantissa_c_fu_268_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln84_fu_287_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln73_fu_259_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln84_fu_290_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_296_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_249_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln81_fu_283_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_308_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln84_1_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal raw_m_ab_fu_185_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal raw_m_ab_fu_185_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mulBF16_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mulBF16_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        c : IN STD_LOGIC_VECTOR (31 downto 0);
        c_ap_vld : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component mulBF16_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        a => a,
        b => b,
        c => c,
        c_ap_vld => c_ap_vld);

    mul_8ns_8ns_16_1_1_U1 : component mulBF16_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => raw_m_ab_fu_185_p0,
        din1 => raw_m_ab_fu_185_p1,
        dout => raw_m_ab_fu_185_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                a_read_reg_334 <= a;
                b_read_reg_329 <= b;
                exponent_b_reg_339 <= b(14 downto 7);
                or_ln51_reg_344 <= or_ln51_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln56_fu_179_p2 = ap_const_lv1_0) and (or_ln51_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln84_1_reg_367 <= add_ln84_1_fu_239_p2;
                sf_reg_362 <= raw_m_ab_fu_185_p2(15 downto 7);
                st_reg_357 <= raw_m_ab_fu_185_p2(15 downto 8);
                tmp_2_reg_352 <= raw_m_ab_fu_185_p2(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln51_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                or_ln56_reg_348 <= or_ln56_fu_179_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln84_1_fu_239_p2 <= std_logic_vector(unsigned(zext_ln66_fu_207_p1) + unsigned(select_ln66_fu_199_p3));
    add_ln84_fu_290_p2 <= std_logic_vector(signed(sext_ln84_fu_287_p1) + signed(zext_ln73_fu_259_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c <= (tmp1_fu_308_p6 or sext_ln84_1_fu_304_p1);

    c_ap_vld_assign_proc : process(or_ln51_reg_344, or_ln56_reg_348, ap_CS_fsm_state2)
    begin
        if (((or_ln56_reg_348 = ap_const_lv1_0) and (or_ln51_reg_344 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_ap_vld <= ap_const_logic_1;
        else 
            c_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_14_fu_101_p1 <= a(7 - 1 downto 0);
    empty_fu_97_p1 <= b(7 - 1 downto 0);
    exponent_a_fu_105_p4 <= a(14 downto 7);
    exponent_b_fu_127_p4 <= b(14 downto 7);
    icmp_ln51_1_fu_155_p2 <= "1" when (exponent_b_fu_127_p4 = ap_const_lv8_0) else "0";
    icmp_ln51_fu_149_p2 <= "1" when (exponent_a_fu_105_p4 = ap_const_lv8_0) else "0";
    icmp_ln56_1_fu_173_p2 <= "1" when (exponent_b_fu_127_p4 = ap_const_lv8_FF) else "0";
    icmp_ln56_fu_167_p2 <= "1" when (exponent_a_fu_105_p4 = ap_const_lv8_FF) else "0";
    mantissa_a_fu_115_p3 <= (ap_const_lv1_1 & empty_14_fu_101_p1);
    mantissa_b_fu_137_p3 <= (ap_const_lv1_1 & empty_fu_97_p1);
    mantissa_c_fu_268_p3 <= 
        zext_ln73_1_fu_262_p1 when (tmp_2_reg_352(0) = '1') else 
        zext_ln73_2_fu_265_p1;
    or_ln51_fu_161_p2 <= (icmp_ln51_fu_149_p2 or icmp_ln51_1_fu_155_p2);
    or_ln56_fu_179_p2 <= (icmp_ln56_fu_167_p2 or icmp_ln56_1_fu_173_p2);
    raw_m_ab_fu_185_p0 <= raw_m_ab_fu_185_p00(8 - 1 downto 0);
    raw_m_ab_fu_185_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_b_fu_137_p3),16));
    raw_m_ab_fu_185_p1 <= raw_m_ab_fu_185_p10(8 - 1 downto 0);
    raw_m_ab_fu_185_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_a_fu_115_p3),16));
    select_ln66_fu_199_p3 <= 
        ap_const_lv9_182 when (tmp_1_fu_191_p3(0) = '1') else 
        ap_const_lv9_181;
        sext_ln84_1_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_296_p3),32));

        sext_ln84_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln84_1_reg_367),10));

    tmp1_fu_308_p6 <= ((((tmp_fu_249_p4 & ap_const_lv6_0) & tmp_4_fu_275_p3) & ap_const_lv1_0) & trunc_ln81_fu_283_p1);
    tmp_1_fu_191_p3 <= raw_m_ab_fu_185_p2(15 downto 15);
    tmp_3_fu_296_p3 <= (add_ln84_fu_290_p2 & ap_const_lv7_0);
    tmp_4_fu_275_p3 <= mantissa_c_fu_268_p3(8 downto 8);
    tmp_fu_249_p4 <= xor_ln61_fu_245_p2(31 downto 15);
    trunc_ln81_fu_283_p1 <= mantissa_c_fu_268_p3(7 - 1 downto 0);
    xor_ln61_fu_245_p2 <= (b_read_reg_329 xor a_read_reg_334);
    zext_ln66_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exponent_a_fu_105_p4),9));
    zext_ln73_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(st_reg_357),16));
    zext_ln73_2_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_reg_362),16));
    zext_ln73_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exponent_b_reg_339),10));
end behav;
